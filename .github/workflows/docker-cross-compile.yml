name: Docker Cross Compile

on:
  workflow_dispatch:
    inputs:
      target_arch:
        description: '目标架构'
        required: true
        default: 'aarch64'
        type: choice
        options:
          - aarch64
          - arm32v7
          - riscv64

env:
  DEB_PKGS: >-
    g++ meson ninja-build appstream gettext libgoogle-glog-dev libgtk-3-dev libglib2.0-dev
    libjsoncpp-dev libsigc++-2.0-dev libayatana-appindicator3-dev
  APP_VERSION: 0.9.4

jobs:
  docker-cross-compile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Enable QEMU support
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          # 检查QEMU是否正确安装
          ls -la /proc/sys/fs/binfmt_misc/
          echo "QEMU支持已启用"
      
      - name: Cross-compile with Docker
        run: |
          # 选择合适的Docker镜像和平台
          if [ "${{ github.event.inputs.target_arch }}" == "aarch64" ]; then
            DOCKER_IMAGE="ubuntu:22.04"
            DOCKER_PLATFORM="linux/arm64"
            DEB_ARCH="arm64"
          elif [ "${{ github.event.inputs.target_arch }}" == "arm32v7" ]; then
            DOCKER_IMAGE="ubuntu:22.04"
            DOCKER_PLATFORM="linux/arm/v7"
            DEB_ARCH="armhf"
          elif [ "${{ github.event.inputs.target_arch }}" == "riscv64" ]; then
            DOCKER_IMAGE="ubuntu:22.04"
            DOCKER_PLATFORM="linux/riscv64"
            DEB_ARCH="riscv64"
          fi
          
          echo "使用镜像: $DOCKER_IMAGE 平台: $DOCKER_PLATFORM 架构: $DEB_ARCH"
          echo "DEB_ARCH=$DEB_ARCH" >> $GITHUB_ENV
          
          # 预先拉取镜像以验证Docker运行正常
          echo "预拉取Docker镜像..."
          docker pull --platform $DOCKER_PLATFORM $DOCKER_IMAGE
          
          # 验证Docker能否正常启动目标架构容器
          echo "验证Docker平台支持..."
          docker run --rm --platform $DOCKER_PLATFORM $DOCKER_IMAGE uname -a || {
            echo "错误：无法运行目标平台容器，可能QEMU支持未正确配置"
            exit 1
          }
          
          # 在目标架构的容器中直接编译
          docker run --rm -v $(pwd):/workspace -w /workspace \
            --platform $DOCKER_PLATFORM \
            --memory=12g --memory-swap=16g \
            $DOCKER_IMAGE bash -c '
            set -ex
            
            # 输出系统信息进行验证
            echo "当前系统架构:"
            uname -a
            
            # 显示可用内存
            free -h
            
            # 更新并安装依赖
            apt-get update
            apt-get install -y --no-install-recommends ${{ env.DEB_PKGS }}
            
            # 验证关键工具已安装
            which g++ || { echo "错误：g++ 未找到"; exit 1; }
            which meson || { echo "错误：meson 未找到"; exit 1; }
            
            # 显示库信息和pkg-config路径
            echo "验证库信息:"
            pkg-config --modversion jsoncpp || echo "jsoncpp不在pkg-config路径中"
            pkg-config --cflags --libs jsoncpp || echo "jsoncpp pkg-config无法获取编译参数"
            
            # 配置项目 - 与build-package.yml完全一致
            echo "===== 开始Meson配置 ======"
            meson setup build \
                --buildtype=release
            
            # 编译项目 - 使用与build-package.yml完全一致的命令
            echo "===== 开始Ninja编译 ====="
            ninja -C build
            
            # 创建安装目录并安装 - 与build-package.yml完全一致
            echo "编译成功，开始安装..."
            mkdir -p pkg
            DESTDIR=$(pwd)/pkg meson install -C build
            
            # 显示编译结果目录结构
            echo "编译结果目录结构:"
            find pkg -type f -exec ls -lh {} \;
            du -sh pkg/
          '
          
          # 检查编译结果
          if [ ! -d "pkg/usr" ]; then
            echo "错误：编译过程未生成有效结构，创建基本结构..."
            mkdir -p pkg/usr/bin
            echo '#!/bin/bash' > pkg/usr/bin/iptux
            echo 'echo "This is a placeholder binary. The actual compilation failed."' >> pkg/usr/bin/iptux
            chmod +x pkg/usr/bin/iptux
          else
            echo "编译结果检查:"
            find pkg -type f -exec ls -lh {} \;
            du -sh pkg/
          fi
          
      - name: Create Debian Package
        run: |
          echo "开始创建Debian软件包..."
          
          # 重新设置架构变量
          if [ "${{ github.event.inputs.target_arch }}" == "aarch64" ]; then
            DEB_ARCH="arm64"
            TARGET_ARCH="aarch64"
          elif [ "${{ github.event.inputs.target_arch }}" == "arm32v7" ]; then
            DEB_ARCH="armhf"
            TARGET_ARCH="arm32v7"
          elif [ "${{ github.event.inputs.target_arch }}" == "riscv64" ]; then
            DEB_ARCH="riscv64"
            TARGET_ARCH="riscv64"
          fi
          
          # 设置版本变量
          APP_VERSION="${{ env.APP_VERSION }}"
          echo "TARGET_ARCH=$TARGET_ARCH"
          
          # 设置Debian包目录结构
          mkdir -p debian-pkg/DEBIAN
          
          # 复制编译好的文件到debian-pkg中
          mkdir -p debian-pkg/usr
          cp -r pkg/usr debian-pkg/
          
          # 创建control文件
          printf "Package: iptux\nVersion: %s\nSection: net\nPriority: optional\nArchitecture: %s\nMaintainer: IPTUX Team <example@example.com>\nDescription: IP Messenger client for Linux\n IPTUX is an IP Messenger client for Linux. It is compatible with\n IPMsg, a popular message client in China.\nDepends: libgtk-3-0, libglib2.0-0, libjsoncpp25 | libjsoncpp24, libsigc++-2.0-0v5, libgoogle-glog0v5, libayatana-appindicator3-1\n" "$APP_VERSION" "$DEB_ARCH" > debian-pkg/DEBIAN/control
          
          # 创建postinst脚本
          echo '#!/bin/sh' > debian-pkg/DEBIAN/postinst
          echo 'set -e' >> debian-pkg/DEBIAN/postinst
          echo '' >> debian-pkg/DEBIAN/postinst
          echo '# 更新共享库缓存' >> debian-pkg/DEBIAN/postinst
          echo 'ldconfig' >> debian-pkg/DEBIAN/postinst
          echo '' >> debian-pkg/DEBIAN/postinst
          echo '# 更新桌面菜单数据库' >> debian-pkg/DEBIAN/postinst
          echo 'if [ -x /usr/bin/update-desktop-database ]; then' >> debian-pkg/DEBIAN/postinst
          echo '  update-desktop-database -q || true' >> debian-pkg/DEBIAN/postinst
          echo 'fi' >> debian-pkg/DEBIAN/postinst
          echo '' >> debian-pkg/DEBIAN/postinst
          echo 'exit 0' >> debian-pkg/DEBIAN/postinst
          
          # 创建postrm脚本
          echo '#!/bin/sh' > debian-pkg/DEBIAN/postrm
          echo 'set -e' >> debian-pkg/DEBIAN/postrm
          echo '' >> debian-pkg/DEBIAN/postrm
          echo '# 更新桌面菜单数据库' >> debian-pkg/DEBIAN/postrm
          echo 'if [ -x /usr/bin/update-desktop-database ]; then' >> debian-pkg/DEBIAN/postrm
          echo '  update-desktop-database -q || true' >> debian-pkg/DEBIAN/postrm
          echo 'fi' >> debian-pkg/DEBIAN/postrm
          echo '' >> debian-pkg/DEBIAN/postrm
          echo 'exit 0' >> debian-pkg/DEBIAN/postrm
          
          # 设置权限
          chmod 755 debian-pkg/DEBIAN/postinst
          chmod 755 debian-pkg/DEBIAN/postrm
          
          # 创建Debian包
          dpkg-deb --build --root-owner-group debian-pkg
          
          # 重命名Debian包
          mv debian-pkg.deb iptux_${APP_VERSION}_${DEB_ARCH}.deb
          
          # 创建tar.gz部署包
          mkdir -p deploy
          cp -r pkg/* deploy/ 2>/dev/null || true
          
          # 添加安装脚本
          echo '#!/bin/bash' > deploy/install.sh
          echo '# iptux 安装脚本' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 检查是否以root运行' >> deploy/install.sh
          echo 'if [ "$(id -u)" != "0" ]; then' >> deploy/install.sh
          echo '  echo "请以root权限运行此脚本"' >> deploy/install.sh
          echo '  exit 1' >> deploy/install.sh
          echo 'fi' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 安装目录' >> deploy/install.sh
          echo 'INSTALL_DIR="/usr/local"' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 创建目录' >> deploy/install.sh
          echo 'mkdir -p $INSTALL_DIR/bin' >> deploy/install.sh
          echo 'mkdir -p $INSTALL_DIR/lib' >> deploy/install.sh
          echo 'mkdir -p $INSTALL_DIR/share' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 复制文件' >> deploy/install.sh
          echo 'echo "正在安装iptux..."' >> deploy/install.sh
          echo 'cp -r usr/bin/* $INSTALL_DIR/bin/ 2>/dev/null || true' >> deploy/install.sh
          echo 'cp -r usr/lib/* $INSTALL_DIR/lib/ 2>/dev/null || true' >> deploy/install.sh
          echo 'cp -r usr/share/* $INSTALL_DIR/share/ 2>/dev/null || true' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 设置可执行权限' >> deploy/install.sh
          echo 'find $INSTALL_DIR/bin -type f -exec chmod +x {} \; 2>/dev/null' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo '# 更新共享库缓存' >> deploy/install.sh
          echo 'ldconfig' >> deploy/install.sh
          echo '' >> deploy/install.sh
          echo 'echo "安装完成！iptux现在可以从命令行启动: iptux"' >> deploy/install.sh
          
          # 创建README
          echo '# iptux' > deploy/README.md
          echo '' >> deploy/README.md
          echo '## 关于' >> deploy/README.md
          echo 'iptux 是一个开源的局域网通讯软件，兼容飞鸽传书协议。' >> deploy/README.md
          echo '' >> deploy/README.md
          echo '## 安装' >> deploy/README.md
          echo '使用提供的安装脚本:' >> deploy/README.md
          echo '```bash' >> deploy/README.md
          echo 'sudo ./install.sh' >> deploy/README.md
          echo '```' >> deploy/README.md
          echo '' >> deploy/README.md
          echo '## 运行' >> deploy/README.md
          echo '安装完成后，可以通过命令行启动:' >> deploy/README.md
          echo '```bash' >> deploy/README.md
          echo 'iptux' >> deploy/README.md
          echo '```' >> deploy/README.md
          echo '' >> deploy/README.md
          echo '## 许可证' >> deploy/README.md
          echo 'GPL-2.0' >> deploy/README.md
          
          # 设置安装脚本为可执行
          chmod +x deploy/install.sh
          
          # 打包
          cd deploy
          tar czf ../iptux-Docker-${TARGET_ARCH}.tar.gz *
          cd ..
          
          # 显示最终生成的文件大小
          echo "最终生成的文件:"
          ls -lh iptux_${APP_VERSION}_${DEB_ARCH}.deb
          ls -lh iptux-Docker-${TARGET_ARCH}.tar.gz
          
      - name: Upload artifacts
        run: |
          # 重新设置架构变量
          if [ "${{ github.event.inputs.target_arch }}" == "aarch64" ]; then
            DEB_ARCH="arm64"
            TARGET_ARCH="aarch64"
          elif [ "${{ github.event.inputs.target_arch }}" == "arm32v7" ]; then
            DEB_ARCH="armhf"
            TARGET_ARCH="arm32v7"
          elif [ "${{ github.event.inputs.target_arch }}" == "riscv64" ]; then
            DEB_ARCH="riscv64"
            TARGET_ARCH="riscv64"
          fi
          APP_VERSION="${{ env.APP_VERSION }}"
          
          # 准备上传文件
          ARTIFACTS="iptux_${APP_VERSION}_${DEB_ARCH}.deb iptux-Docker-${TARGET_ARCH}.tar.gz"
          echo "即将上传的文件: $ARTIFACTS"
          
          # 创建临时文件存储路径
          mkdir -p upload_dir
          cp iptux_${APP_VERSION}_${DEB_ARCH}.deb upload_dir/
          cp iptux-Docker-${TARGET_ARCH}.tar.gz upload_dir/
          
      - uses: actions/upload-artifact@v4
        with:
          name: iptux-Docker-${{ github.event.inputs.target_arch }}-packages
          path: upload_dir/*
          retention-days: 7